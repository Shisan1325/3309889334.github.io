<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个链接帖子</title>
      <link href="/posts/227552209/"/>
      <url>/posts/227552209/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/2645272983/"/>
      <url>/posts/2645272983/</url>
      
        <content type="html"><![CDATA[<p>测试用例</p><p><img src="/posts/2645272983/1.png" alt="一张测试用图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年8月月6日日新闻联播文字版</title>
      <link href="/posts/5c40dfd6/"/>
      <url>/posts/5c40dfd6/</url>
      
        <content type="html"><![CDATA[<h3 id="20238月6日今日新闻联播主要内容"><a href="#20238月6日今日新闻联播主要内容" class="headerlink" title="20238月6日今日新闻联播主要内容"></a>20238月6日今日新闻联播主要内容</h3><ul><li>《求是》杂志发表习近平总书记重要文章《中国式现代化是强国建设、民族复兴的康庄大道》</li><li>【新思想引领新征程】共护长江水同绘新答卷</li><li>李强主持召开国务院第二次全体会议强调全面落实党中央决策部署坚定不移推动高质量发展大力提升行政效能为完成各项任务提供有力保障</li><li>【学思想强党性重实践建新功】全面推动退役军人工作高质量发展</li><li>【新时代新征程新伟业——实干笃行】广东突出“制造业当家”打造发展新优势</li><li>加紧灾后重建尽快恢复生产生活秩序</li><li>国务院新闻办举行“最美应急管理工作者”中外记者见面会</li><li>国内联播快讯</li><li>美国夏威夷毛伊岛大火死亡人数升至106人</li><li>俄称打击乌重要军工企业乌称在多方向发动进攻</li><li>俄方就美国生物军事活动调查情况举行新闻发布会</li><li>国际联播快讯</li></ul><p>以下为详细的文字版全文：</p><h2 id="《求是》杂志发表习近平总书记重要文章《中国式现代化是强国建设、民族复兴的康庄大道》"><a href="#《求是》杂志发表习近平总书记重要文章《中国式现代化是强国建设、民族复兴的康庄大道》" class="headerlink" title="《求是》杂志发表习近平总书记重要文章《中国式现代化是强国建设、民族复兴的康庄大道》"></a>《求是》杂志发表习近平总书记重要文章《中国式现代化是强国建设、民族复兴的康庄大道》</h2><p>8月16日出版的第16期《求是》杂志发表中共中央总书记、国家主席、中央军委主席习近平的重要文章《中国式现代化是强国建设、民族复兴的康庄大道》。</p><p>文章强调，一个国家走向现代化，既要遵循现代化一般规律，更要符合本国实际，具有本国特色。中国式现代化既有各国现代化的共同特征，更有基于自己国情的鲜明特色。党的二十大报告明确概括了中国式现代化5个方面的中国特色，深刻揭示了中国式现代化的科学内涵。这既是理论概括，也是实践要求，为全面建成社会主义现代化强国、实现中华民族伟大复兴指明了一条康庄大道。</p><p>文章指出，要把中国式现代化的中国特色变为成功实践，把鲜明特色变成独特优势，需要付出艰巨努力。第一，人口规模巨大的现代化。这是中国式现代化的显著特征。中国14亿多人口整体迈入现代化，规模超过现有发达国家人口的总和，将极大地改变现代化的世界版图。这是人类历史上规模最大的现代化，也是难度最大的现代化。我们想问题、作决策、办事情，首先要考虑人口基数问题，考虑我国城乡区域发展水平差异大等实际，既不能好高骛远，也不能因循守旧，要保持历史耐心，坚持稳中求进、循序渐进、持续推进。第二，全体人民共同富裕的现代化。这是中国式现代化的本质特征，也是区别于西方现代化的显著标志。要在推动高质量发展、做好做大“蛋糕”的同时，进一步分好“蛋糕”，让现代化建设成果更多更公平惠及全体人民，坚决防止两极分化。第三，物质文明和精神文明相协调的现代化。既要物质富足、也要精神富有，是中国式现代化的崇高追求。要坚持两手抓、两手硬，促进物质文明和精神文明相互协调、相互促进。要建设具有强大凝聚力和引领力的社会主义意识形态，不断丰富人民精神世界，提高全社会文明程度，促进人的全面发展。第四，人与自然和谐共生的现代化。尊重自然、顺应自然、保护自然，促进人与自然和谐共生，是中国式现代化的鲜明特点。要牢固树立和践行绿水青山就是金山银山的理念，以高品质的生态环境支撑高质量发展。第五，走和平发展道路的现代化。坚持和平发展，在坚定维护世界和平与发展中谋求自身发展，又以自身发展更好维护世界和平与发展，推动构建人类命运共同体，是中国式现代化的突出特征。我们要始终高举和平、发展、合作、共赢旗帜，奉行互利共赢的开放战略，践行真正的多边主义，弘扬全人类共同价值，努力为人类和平与发展作出更大贡献。</p><p>文章强调，新中国成立特别是改革开放以来，我们用几十年时间走完西方发达国家几百年走过的工业化历程，创造了经济快速发展和社会长期稳定的奇迹，为中华民族伟大复兴开辟了广阔前景。实践证明，中国式现代化走得通、行得稳，是强国建设、民族复兴的唯一正确道路。</p><h2 id="【新思想引领新征程】共护长江水同绘新答卷"><a href="#【新思想引领新征程】共护长江水同绘新答卷" class="headerlink" title="【新思想引领新征程】共护长江水同绘新答卷"></a>【新思想引领新征程】共护长江水同绘新答卷</h2><p>长江经济带覆盖沿江11省市，横跨我国东中西三大板块，生态地位突出，发展潜力巨大。党的十八大以来，习近平总书记多次沿江调研考察，站在历史和全局的高度，做出了“推动长江经济带发展”的重大战略决策。面对“生态优先、绿色发展”的时代命题，沿江各省市转变发展思路，精心呵护一江清水，奋力书写高质量发展答卷。</p><p>行走在长江两岸，满目苍翠、群鸟翱翔，人与自然和谐共生的画卷随处可见。如今，长江干流已经连续三年保持Ⅱ类水质，一个个滨江公园串起了亮丽的生态廊道。然而，时光回转到十年前，长江沿岸的一些地方还是烟囱林立、污水横流。</p><p>母亲河的状况，习近平总书记始终牵挂于心。他走遍沿江各省市，先后三次主持召开座谈会并发表重要讲话，从强调“把修复长江生态环境摆在压倒性位置”，为长江经济带的发展立下规矩；到深刻阐明“整体推进和重点突破”等五大辩证关系，为长江经济带高质量发展把脉定向；再到赋予长江经济带成为“生态优先绿色发展主战场、畅通国内国际双循环主动脉、引领经济高质量发展主力军”的战略使命。总书记高瞻远瞩，为长江经济带发展谋篇布局。</p><p>大江大河治理难在“九龙治水、各自为政”。随着“共抓大保护、不搞大开发”的理念深入人心，长江流域携手共治成为共识。鄂赣湘三省协同治理“一江两湖”，浙皖两地建立横向生态补偿机制，多地把岸线治理转变为山水林田湖草系统修复。在长江上游一级支流赤水河，云贵川三省按照统一标准治理污染排放和非法捕捞，曾经难觅踪迹的一些鱼种再次回到人们视线之中。</p><p>习近平总书记强调：“不搞大开发不是不要开发，而是不搞破坏性开发，要走生态优先、绿色发展之路。”在生态环境保护发生转折性变化后，如何实现经济社会更高质量、更加绿色的发展是沿江一些经济大省面临的共性问题。</p><p>长期以来，长江沿岸重化工业高密度布局。以往一些地方担心整治力度过大，短期内会影响财政收入，低质低效的污染企业总是关关停停。</p><p>在严格的环保要求倒逼之下，各地重新梳理产业链，培育新动能。岸线仅有25.8公里的常州段曾经集聚了120多家化工企业，经过四次集中整治后，低端化工企业全部退出，腾退的空间留给了绿地和新兴产业。日益改善的生态环境甚至吸引了对空气质量要求苛刻的碳纤维企业前来落户，滨江布局焕然一新。</p><p>如今，长江一公里范围内的落后化工产能基本淘汰，新的增长点应运而生。上游动力电池、中游“电子级磷酸”、下游新材料等一批新兴产业迅速崛起。长江沿线形成3个国家产业创新中心、800多家国家企业技术中心和30个国家级战略性新兴产业集群。2022年，长江经济带地区生产总值达到55.98万亿元，同比增长3.0%，占全国比重提高到46.5%。</p><h2 id="李强主持召开国务院第二次全体会议强调全面落实党中央决策部署坚定不移推动高质量发展大力提升行政效能为完成各项任务提供有力保障"><a href="#李强主持召开国务院第二次全体会议强调全面落实党中央决策部署坚定不移推动高质量发展大力提升行政效能为完成各项任务提供有力保障" class="headerlink" title="李强主持召开国务院第二次全体会议强调全面落实党中央决策部署坚定不移推动高质量发展大力提升行政效能为完成各项任务提供有力保障"></a>李强主持召开国务院第二次全体会议强调全面落实党中央决策部署坚定不移推动高质量发展大力提升行政效能为完成各项任务提供有力保障</h2><p>国务院总理李强8月16日主持召开国务院第二次全体会议，深入贯彻习近平总书记关于当前经济形势和经济工作的重要讲话精神，全面落实党中央决策部署，对做好下一步工作进行再部署、再推进。他强调，要切实把思想和行动统一到党中央的科学判断和决策部署上来，坚持稳中求进工作总基调，坚定信心、保持定力、攻坚克难，精准有力实施宏观调控，强化各类政策协调配合，确保完成全年目标任务，扎实推动高质量发展。</p><p>李强强调，要着力扩大国内需求，继续拓展扩消费、促投资政策空间，提振大宗消费，调动民间投资积极性，扎实做好重大项目前期研究和储备。要着力构建现代化产业体系，加快用新技术新业态改造提升传统产业，大力推进战略性新兴产业集群发展，全面加快制造业数字化转型步伐。要着力深化改革扩大开放，深入实施新一轮国企改革深化提升行动，优化民营企业发展环境，推动外贸稳规模优结构，更大力度吸引和利用外资。要着力促进区域城乡协调发展，深化落实主体功能区战略，深入实施新型城镇化战略和乡村振兴战略，巩固拓展脱贫攻坚成果。要着力防范化解重大风险，有力有序有效推进重点领域实质性化险。要着力保障和改善民生，加大困难群众社会救助兜底保障力度，多渠道促进就业增收。要着力强化防灾减灾救灾和安全生产监管，切实做好灾后恢复工作，深入开展安全生产风险隐患排查整治，最大限度保障人民群众生命财产安全。</p><p>李强强调，要大力提升行政效能，为完成各项任务提供有力保障。国务院各部门要强化全局观念，心怀“国之大者”，找准工作切入点，打开工作新局面。要主动跨前一步，加强协同配合，围绕“高效办成一件事”合力攻坚，不断增强群众和企业的获得感。要打破思维定式，坚持一切从实际出发，不断优化工作流程和推进方式。要更好履职尽责，把监管与服务、保安全与促发展有机结合起来，多为发展想办法，多为企业助把力，在全社会营造干事创业、共促发展的浓厚氛围。</p><p>国务院全体会议组成人员出席会议，国务院其他部门、单位负责人列席会议。各省（区、市）政府和新疆生产建设兵团主要负责人以视频形式在当地列席会议。</p><h2 id="【学思想强党性重实践建新功】全面推动退役军人工作高质量发展"><a href="#【学思想强党性重实践建新功】全面推动退役军人工作高质量发展" class="headerlink" title="【学思想强党性重实践建新功】全面推动退役军人工作高质量发展"></a>【学思想强党性重实践建新功】全面推动退役军人工作高质量发展</h2><p>退役军人事务部扎实开展学习贯彻习近平新时代中国特色社会主义思想主题教育，积极制定实施方案，围绕解决退役军人和优抚对象急难愁盼问题开展调查研究，推动新时代退役军人工作高质量发展。</p><p>主题教育开展以来，退役军人事务部党组坚持把学习习近平新时代中国特色社会主义思想当做党组会“第一议题”，深刻理解习近平总书记亲自谋划设计、亲自部署推动组建退役军人管理保障机构的重大意义。主题教育领导小组明确了5个方面20项工作安排，推动理论学习走深走实。</p><p>调研组深入边防一线，聚焦军地关注的热点、难点问题开展专题调查研究。针对退役军人普遍关心的增强就业技能、拓宽就业渠道、优抚政策落实等问题，调研组定期选派党员干部到退役军人服务站常态化蹲点，听取意见建议、及时改进，积极推动社会力量协同做好退役军人帮扶援助工作，使主题教育取得实实在在的成效。</p><p>与此同时，退役军人事务部还积极协调提高部分优抚对象抚恤补助标准，争取2.7亿元中央专项彩票公益金用于支持15所优抚医院提升能力改造。</p><p>目前，退役军人事务部已经将调研中发现的问题梳理形成了问题清单，持续推动落实，促进调研成果转化。</p><h2 id="【新时代新征程新伟业——实干笃行】广东突出“制造业当家”打造发展新优势"><a href="#【新时代新征程新伟业——实干笃行】广东突出“制造业当家”打造发展新优势" class="headerlink" title="【新时代新征程新伟业——实干笃行】广东突出“制造业当家”打造发展新优势"></a>【新时代新征程新伟业——实干笃行】广东突出“制造业当家”打造发展新优势</h2><p>广东是我国经济总量第一大省，今年以来，广东以“实体经济为本”，突出“制造业当家”，推动传统产业转型升级，提升新兴产业发展能级，推动经济实现高质量发展。</p><p>以重大产业项目为抓手，推动工业提速，成为眼下广东寻求新突破的方式之一。在广州开发区，每个项目不仅有“服务专员”，而且都有属于自己的“诉求档案盒”，以跟踪服务推动重大项目加快建设。</p><p>从集成电路再到新材料，一个个重大项目落子开工，呈现出广东“制造优先”的鲜明特征。截至目前，广东近500个制造业重点项目加快建设，总投资超1.3万亿元，前七个月已完成年度计划投资的70%。</p><p>增量以外更要提质。深圳龙岗区连续5年位于全国百强区前十名，但是区内大多是急需转型的传统制造业。当地聚焦智能制造转型，牵头成立全省首个工业互联网创业中心，为企业量身定制转型计划，并给予技改补贴。目前，已有1400多家进行了技术改造升级。</p><p>今年上半年，广东工业技改投资同比增长16.8%，增速对比去年同期高14.4个百分点。传统产业焕发新活力，中小企业也要实现大发展。广东从土地、政策、技术、人才等多方面提供要素保障，帮助中小企业走专业化、精细化、特色化发展之路。</p><p>在今年上半年第五批国家专精特新“小巨人”企业名单中，658家广东企业入榜，累计专精特新企业培育数量上升至全国第一。除了做强当下，广东更在布局未来。围绕20个战略性产业集群，包括集成电路、新能源汽车、新型储能等产业在内的新支柱正在形成，人工智能、量子计算、深海空天等未来产业正加快布局，发展新动能不断涌现。上半年，广东先进制造业增加值在工业中所占比重达到55.1%，创历史新高。</p><h2 id="加紧灾后重建尽快恢复生产生活秩序"><a href="#加紧灾后重建尽快恢复生产生活秩序" class="headerlink" title="加紧灾后重建尽快恢复生产生活秩序"></a>加紧灾后重建尽快恢复生产生活秩序</h2><p>连日来，各地和有关部门全力以赴加紧灾后重建，尽快恢复受灾地区生产生活秩序。</p><p>在河北涿州，清淤和垃圾清理接近尾声。当地调用大型装卸车将垃圾转运到周边县市垃圾焚烧发电厂进行集中处理。截至今天（8月16日），涞水县有410多公里的水毁道路恢复通行，剩下的道路正在全力抢修中。</p><p>受灾企业复工复产也在加紧推进，目前，涿州受灾企业290家，已复工89家，易县清西陵、太行水镇景区已恢复开放，开始接待游客。</p><p>北京市受灾地区重建工作有序推进。在暴雨中被淹的房山区窦店镇苏村，积水已被排尽，经过清淤和消杀，沿街商铺开始恢复营业。在田家园村，停了半个月的田家园大集复市。</p><p>目前，天津市各行洪河道水位持续下降。在保证安全的前提下，当地正平稳有序组织群众返回家园，同时做好灾后防疫工作。</p><p>在吉林，受灾较为严重的舒兰、榆树、扶余已完成道路抢修315处，阻断道路基本全部实现通车，恢复45条10千伏供电线路。疾控中心的工作人员对垃圾临时堆放点进行消杀，并派出专人指导受灾群众做好灾后防疫工作。 </p><p>到今天，黑龙江境内所有水库均在汛限水位以下，五常市已抢修道路146条，24个乡镇恢复通车，当地正在加紧抢通山区断路村屯；哈尔滨双城区受灾村屯已全部恢复通电、通讯。</p><p>在洪涝灾害中，辽宁省丹东、抚顺两市共有5座大中型灌区受到影响，目前当地有关部门正加紧抢修水毁灌区设备。 </p><p>日前，国家发展改革委增加安排中央预算内投资5亿元，支持河北、北京、黑龙江等6省（市）受灾严重地区基础设施和基本公共服务设施应急恢复重建。</p><p>交通运输部协调调度应急抢险队伍、装备抢通受损道路，目前，北京、河北等重点灾区受损国省道已全面抢通。</p><p>国家金融监督管理总局要求各银行保险机构全力支持防汛救灾和灾后重建。截至8月15日，已向北京、天津、河北等6个受灾严重地区发放防汛救灾、灾后重建等相关贷款138.9亿元，保险赔付金额24亿元。</p><p>水利部派出指导组在吉林省舒兰市展开支持帮扶。截至目前，出现问题的16处供水工程已有13处修复完毕。 </p><p>工业和信息化部组织信息通信行业分类推进损毁通信设施恢复重建，高标准建设易受灾地区通信设施。</p><p>国家卫生健康委派出工作组，分赴河北、黑龙江、吉林，协助受灾地区开展医疗救助。</p><h2 id="国务院新闻办举行“最美应急管理工作者”中外记者见面会"><a href="#国务院新闻办举行“最美应急管理工作者”中外记者见面会" class="headerlink" title="国务院新闻办举行“最美应急管理工作者”中外记者见面会"></a>国务院新闻办举行“最美应急管理工作者”中外记者见面会</h2><p>国务院新闻办公室今天（8月16日）举行中外记者见面会，请潘照虎、李孝忠、孙柏涛、王庆银、旦巴群培5名“最美应急管理工作者”代表与中外记者见面交流。他们来自防震减灾、消防救援、森林消防等应急管理系统，代表们通过分享在工作、生活中的感悟，展现出新时代应急管理人闻令而动、夙夜备战、救民于水火、助民于危难的使命担当，践行了“人民至上、生命至上”的铮铮誓言。</p><h2 id="国内联播快讯"><a href="#国内联播快讯" class="headerlink" title="国内联播快讯"></a>国内联播快讯</h2><h3 id="第7届中国—南亚博览会开幕"><a href="#第7届中国—南亚博览会开幕" class="headerlink" title="第7届中国—南亚博览会开幕"></a>第7届中国—南亚博览会开幕</h3><p>今天（8月16日），第7届中国—南亚博览会在云南昆明开幕。本次博览会以“团结协作共谋发展”为主题，设置了南亚馆、文化旅游馆、数字经济馆等15个展馆，吸引80多个国家和地区的超2000家企业参展，展览将持续至20日。</p><h3 id="全国铁路暑运发送旅客突破6亿人次"><a href="#全国铁路暑运发送旅客突破6亿人次" class="headerlink" title="全国铁路暑运发送旅客突破6亿人次"></a>全国铁路暑运发送旅客突破6亿人次</h3><p>记者今天（8月16日）从国铁集团获悉，自7月1日开始的全国铁路暑运至昨天已累计发送旅客超6.14亿人次。其中，8月12日发送旅客1532.6万人次，创暑运单日旅客发送量新高。暑运以来，全国铁路日均开行旅客列车10578列，较2019年同期增长18.9%。</p><h3 id="全国生态日绿色技术交易额达8-9亿元"><a href="#全国生态日绿色技术交易额达8-9亿元" class="headerlink" title="全国生态日绿色技术交易额达8.9亿元"></a>全国生态日绿色技术交易额达8.9亿元</h3><p>首个全国生态日主场活动今天（8月16日）在浙江湖州落幕。活动期间，绿色低碳技术交流洽谈、项目签约活跃，共有22家政府、企事业单位达成绿色技术交易意向，现场签约金额达8.9亿元，涉及技术开发、技术许可、技术投融资和产业化推广等多种类型。</p><h3 id="海关总署推出23条措施促进综保区高质量发展"><a href="#海关总署推出23条措施促进综保区高质量发展" class="headerlink" title="海关总署推出23条措施促进综保区高质量发展"></a>海关总署推出23条措施促进综保区高质量发展</h3><p>海关总署近日从功能拓展、手续简化、优化流程等5方面推出23条措施，进一步促进综保区高质量发展。去年全年，我国以综保区为主体的海关特殊监管区域进出口值8.4万亿元，同比增长7.4%，占全国外贸进出口总值的19.9%。</p><h3 id="2023中国数字经济创新发展大会开幕"><a href="#2023中国数字经济创新发展大会开幕" class="headerlink" title="2023中国数字经济创新发展大会开幕"></a>2023中国数字经济创新发展大会开幕</h3><p>2023中国数字经济创新发展大会今天（8月16日）在汕头开幕，本次大会以“聚数联侨数创未来——高质量推进新型工业化”为主题，围绕数字产业化、产业数字化、数字化治理三大方面设置展览区域。</p><h3 id="2023世界机器人大会在京开幕"><a href="#2023世界机器人大会在京开幕" class="headerlink" title="2023世界机器人大会在京开幕"></a>2023世界机器人大会在京开幕</h3><p>今天（8月16日），2023世界机器人大会在北京开幕。大会以“开放创新聚享未来”为主题，将举办30多场行业论坛。2023世界机器人博览会也同期举办，160多家国内外机器人企业带来近600件展品，大会还首次打造“机器人+”医疗、农业等10大应用场景，展现行业新技术、新产品。</p><h3 id="沪宁沿江高铁今起试运行"><a href="#沪宁沿江高铁今起试运行" class="headerlink" title="沪宁沿江高铁今起试运行"></a>沪宁沿江高铁今起试运行</h3><p>今天（8月16日），沪宁沿江高铁开始运行试验，线路全长279公里，设计时速350公里，起于南京南站，止于江苏太仓站，预计9月全线开通运营。投运后，南京至太仓的铁路运行时间将从目前的3小时缩短至1小时。列车到达太仓后，与此前开通的沪苏通铁路连接，最终到达上海。</p><h3 id="浙江义乌市场经营主体突破百万户"><a href="#浙江义乌市场经营主体突破百万户" class="headerlink" title="浙江义乌市场经营主体突破百万户"></a>浙江义乌市场经营主体突破百万户</h3><p>今天（8月16日），义乌市场经营主体突破百万户，占全国千分之五。投资来自全球155个国家和地区，其中，外商投资来源主要集中在“一带一路”沿线国家和地区。</p><h3 id="南海伏季休渔结束"><a href="#南海伏季休渔结束" class="headerlink" title="南海伏季休渔结束"></a>南海伏季休渔结束</h3><p>2023年南海伏季休渔期于今天（8月16日）12时正式结束，广西、广东、海南、福建等多地举办开渔节，数万艘渔船有序出海作业。南海伏季休渔已开展25年。 </p><h2 id="美国夏威夷毛伊岛大火死亡人数升至106人"><a href="#美国夏威夷毛伊岛大火死亡人数升至106人" class="headerlink" title="美国夏威夷毛伊岛大火死亡人数升至106人"></a>美国夏威夷毛伊岛大火死亡人数升至106人</h2><p>15日，美国夏威夷州毛伊岛大火导致的死亡人数上升至106人，目前仅有少数几名遇难者的身份得到确认。</p><p>当地政府通报称，工作人员搜索了约三分之一的火灾区域。据美国媒体报道，随着搜索工作继续进行，死亡人数将大幅增加。</p><p>15日，在火灾发生后一周，当地政府公布了首批两名遇难者姓名。毛伊县方面称，还有3名遇难者身份得到确认。</p><p>目前，火灾起火原因还在调查中。不过，已有部分受灾市民对当地主要供电公司夏威夷电力公司提起集体诉讼，指控该公司未及时切断供电，导致大风刮倒电线引发火灾。8日火灾发生当天，当地市民拍摄到电线掉落引燃草地的画面。</p><h3 id="美国火灾地区民众批评政府应对不力"><a href="#美国火灾地区民众批评政府应对不力" class="headerlink" title="美国火灾地区民众批评政府应对不力"></a>美国火灾地区民众批评政府应对不力</h3><p>据多家美国媒体报道，火灾地区民众批评政府应对不力，他们只能选择自救。</p><p>此外，美国前众议员罗恩·保罗近日发文，指责美国政府在毛伊岛遭遇严重火灾、众多灾民等待救助时，还在忙于向乌克兰提供巨额战争资助。</p><h2 id="俄称打击乌重要军工企业乌称在多方向发动进攻"><a href="#俄称打击乌重要军工企业乌称在多方向发动进攻" class="headerlink" title="俄称打击乌重要军工企业乌称在多方向发动进攻"></a>俄称打击乌重要军工企业乌称在多方向发动进攻</h2><p>俄罗斯国防部15日称，俄军使用空基和海基远程精确制导武器打击了乌克兰重要军工企业。俄罗斯防空系统当天还击落了试图在别尔哥罗德州发动袭击的乌克兰无人机，乌方暂未对此作出回应。</p><p>乌克兰军方称，乌武装部队继续在梅利托波尔和别尔江斯克方向向俄军发动进攻。</p><h2 id="俄方就美国生物军事活动调查情况举行新闻发布会"><a href="#俄方就美国生物军事活动调查情况举行新闻发布会" class="headerlink" title="俄方就美国生物军事活动调查情况举行新闻发布会"></a>俄方就美国生物军事活动调查情况举行新闻发布会</h2><p>俄罗斯辐射、化学和生物防护部队司令基里洛夫今天（8月16日）就美国生物军事活动的调查情况举行新闻发布会。基里洛夫说，美国军方相关项目主要研究所谓“有潜力的”生物武器相关病毒、细菌等。俄方获得的文件表明，位于德特里克堡的美国陆军传染病研究所直接参与了收集世界多个地区的危险病原体、测试未注册药物等活动，其中包括在乌克兰实施的生物项目。基里洛夫说，可以看出五角大楼对能引发疾病以及疫情的致病菌和病毒感兴趣，而美国生物医药公司则因此获益。</p><h2 id="国际联播快讯"><a href="#国际联播快讯" class="headerlink" title="国际联播快讯"></a>国际联播快讯</h2><h3 id="韩国渔民抗议日本强推核污染水排海"><a href="#韩国渔民抗议日本强推核污染水排海" class="headerlink" title="韩国渔民抗议日本强推核污染水排海"></a>韩国渔民抗议日本强推核污染水排海</h3><p>韩国仁川市部分渔民日前举行抗议活动，渔民们驾驶渔船在海上巡游，反对日本政府强推福岛核污染水排海计划，同时要求韩国政府制定对策，保障渔民的生存权。</p><h3 id="惠誉警告下调美银行评级美银行股下跌"><a href="#惠誉警告下调美银行评级美银行股下跌" class="headerlink" title="惠誉警告下调美银行评级美银行股下跌"></a>惠誉警告下调美银行评级美银行股下跌</h3><p>据美国媒体15日报道，国际评级机构惠誉北美区银行业分析师克里斯托弗·沃尔夫当天表示，如果美国银行运营环境继续恶化，惠誉可能被迫下调包括摩根大通在内的一些美国银行的评级。15日当天，美国多家银行股价下跌，美国银行股价下跌3.20%，摩根大通和富国银行股价下跌都超过2%。</p><p>惠誉在6月底将美国银行的“运营环境”评分从AA下调到AA-，原因是美国信用评级下调压力，美国银行业危机暴露出的监管问题以及利率的不确定性。</p><h3 id="利比亚首都爆发冲突已致27人死亡"><a href="#利比亚首都爆发冲突已致27人死亡" class="headerlink" title="利比亚首都爆发冲突已致27人死亡"></a>利比亚首都爆发冲突已致27人死亡</h3><p>利比亚首都的黎波里当地时间14日晚间爆发武装冲突，冲突一直持续到15日上午。据利比亚媒体报道，冲突已造成27人死亡，上百人受伤。报道称，冲突爆发在隶属于利比亚民族团结政府的两个武装派别之间。受冲突影响，米提加国际机场暂停起降航班。</p><h3 id="加拿大西北地区因林火进入紧急状态"><a href="#加拿大西北地区因林火进入紧急状态" class="headerlink" title="加拿大西北地区因林火进入紧急状态"></a>加拿大西北地区因林火进入紧急状态</h3><p>加拿大西北地区15日宣布，整个地区因林火威胁加重进入紧急状态。此前，该地区多个城镇居民进行了紧急疏散。加拿大消防部门公布的数据显示，截至北京时间今天（8月16日）16时，加拿大今年林火过火面积达到13.6万平方公里。</p>]]></content>
      
      
      <categories>
          
          <category> 新闻简报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新闻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/posts/d4a1185/"/>
      <url>/posts/d4a1185/</url>
      
        <content type="html"><![CDATA[<h2 id="1-求最大公约数和最小公倍数"><a href="#1-求最大公约数和最小公倍数" class="headerlink" title="1.求最大公约数和最小公倍数"></a>1.求最大公约数和最小公倍数</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_lcm</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num1：整数</li><li>num2：整数</li></ul><p>输出：</p><ul><li>返回一个包含两个元素的元组，第一个元素表示最大公约数，第二个元素表示最小公倍数。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li><li>返回的结果应为非负整数。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_lcm</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num1, <span class="built_in">int</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num2, <span class="built_in">int</span>) <span class="keyword">or</span> num1 &lt;= <span class="number">0</span> <span class="keyword">or</span> num2 &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算最大公约数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            a, b = b, a % b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算最小公倍数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(a * b) // compute_gcd(a, b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> (compute_gcd(num1, num2), compute_lcm(num1, num2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(gcd_lcm(<span class="number">12</span>, <span class="number">18</span>))</span><br><span class="line"><span class="comment"># 输出：(6, 36)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gcd_lcm(<span class="number">15</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 输出：(5, 60)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>gcd_lcm</code>函数中，首先检查输入参数<code>num1</code>和<code>num2</code>是否为正整数，如果不是则抛出异常。</li><li>然后使用辗转相除法计算最大公约数，将计算公约数的逻辑封装在<code>compute_gcd</code>函数中。</li><li>最后通过计算最大公约数和输入参数的乘积除以最大公约数得到最小公倍数，将计算最小公倍数的逻辑封装在<code>compute_lcm</code>函数中。</li><li>返回一个包含最大公约数和最小公倍数的元组。</li></ul><hr><h2 id="2-斐波那契数列"><a href="#2-斐波那契数列" class="headerlink" title="2.斐波那契数列"></a>2.斐波那契数列</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……。</p><p>在数学上，斐波那契数列以递归的方法来定义：</p><p>$$<br>\begin{equation}<br>\left{<br>    \begin{array}{ll}<br>        F(0)&#x3D;0 \<br>        F(1)&#x3D;1 &amp;&amp; (\boldsymbol{n} \in N) \<br>        F(\boldsymbol{n})&#x3D;F(\boldsymbol{n}-1)+F(\boldsymbol{n}+1)<br>    \end{array}\right.<br>\end{equation}<br>$$</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：非负整数，表示要返回的斐波那契数列的索引位置。</li></ul><p>输出：</p><ul><li>返回第n个斐波那契数列的值。</li></ul><p>要求：</p><ul><li>如果输入的参数不是非负整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为非负整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>) <span class="keyword">or</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为非负整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算斐波那契数列</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 输出：55</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>fibonacci</code>函数中，首先检查输入参数<code>n</code>是否为非负整数，如果不是则抛出异常。</li><li>使用迭代的方式计算第n个斐波那契数列的值。使用两个变量<code>a</code>和<code>b</code>分别表示前一个斐波那契数列的值和当前斐波那契数列的值。</li><li>如果n为0，则返回0；如果n为1，则返回1；否则，通过迭代计算得到第n个斐波那契数列的值。</li><li>返回第n个斐波那契数列的值。</li></ul><hr><h2 id="3-求前n阶乘的和"><a href="#3-求前n阶乘的和" class="headerlink" title="3.求前n阶乘的和"></a>3.求前n阶乘的和</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>比如求1+2!+3!+…+20!的和。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_sum</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：正整数，表示要求前n阶乘的和。<font color="red">注意：</font>不要输入太大的的n，防止数据过大造成电脑卡死。</li></ul><p>输出：</p><ul><li>返回前n阶乘的和。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_sum</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">or</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算前n阶乘的和</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        b *= i</span><br><span class="line">        a += b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 输出：3 (1! + 2!)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出：153 (1! + 2! + 3! + 4! + 5!)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>factorial_sum</code>函数中，首先检查输入参数<code>num</code>是否为正整数，如果不是则抛出异常。</li><li>使用循环计算前<code>num</code>阶乘的和。使用变量<code>a</code>来保存结果，初始值为0，变量<code>b</code>用于计算阶乘的值，初始值为1。在每次迭代中，<code>b</code>表示当前阶乘的值，通过乘以<code>i</code>来更新；<code>a</code>表示前<code>num</code>个阶乘的和，通过累加<code>b</code>到<code>a</code>中来更新。</li><li>返回前<code>num</code>阶乘的和。</li></ul><hr><h2 id="4-判断年份是否是闰年"><a href="#4-判断年份是否是闰年" class="headerlink" title="4.判断年份是否是闰年"></a>4.判断年份是否是闰年</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>判断该年年份是闰年的条件：</p><ul><li><strong>能被4整除，但不能被100整除</strong></li><li><strong>能被400整除</strong></li></ul></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>year：整数，表示要判断的年份。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示给定年份是否为闰年。如果是闰年，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><p>要求：</p><ul><li>如果输入的参数不是整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(year, <span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否为闰年</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2000</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2020</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">1900</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2022</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>is_leap_year</code>函数中，首先检查输入参数<code>year</code>是否为整数，如果不是则抛出异常。</li><li>使用条件判断来判断给定年份是否为闰年。根据闰年的定义，满足以下条件之一即可：<ul><li>能被400整除；</li><li>能被4整除但不能被100整除。</li></ul></li><li>根据条件依次判断，并返回相应的布尔值。如果满足条件，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><hr><h2 id="5-因式分解"><a href="#5-因式分解" class="headerlink" title="5.因式分解"></a>5.因式分解</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>因式分解是将一个数表示为几个因子的乘积的过程，例如：$10&#x3D;2\times5，60&#x3D;2\times2\times3\times5$等。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：正整数，要进行因式分解的数，要求小于1000。</li></ul><p>输出：</p><ul><li>返回一个字符串，表示因式分解的结果。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数或大于等于1000，函数应抛出异常。</li><li>结果中的因子按照从小到大的顺序排列，并以<code>*</code>符号连接。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数，并且小于1000</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">or</span> num &lt;= <span class="number">0</span> <span class="keyword">or</span> num &gt;= <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数且小于1000&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因式分解</span></span><br><span class="line">    factors = []</span><br><span class="line">    divisor = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num % divisor == <span class="number">0</span>:</span><br><span class="line">            factors.append(<span class="built_in">str</span>(divisor))</span><br><span class="line">            num /= divisor</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            divisor += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span>.join(factors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">12</span>))</span><br><span class="line"><span class="comment"># 输出：2*2*3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">36</span>))</span><br><span class="line"><span class="comment"># 输出：2*2*3*3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">90</span>))</span><br><span class="line"><span class="comment"># 输出：2*3*3*5</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>factorize</code>函数中，首先检查输入参数<code>num</code>是否为正整数且小于1000，如果不满足要求则抛出异常。</li><li>使用一个循环来进行因式分解，每次找到一个能整除<code>num</code>的最小素数，并将其作为因子添加到结果列表中。然后将<code>num</code>除以该因子，继续寻找下一个因子，直到<code>num</code>等于1为止。</li><li>最后使用<code>*</code>符号连接结果列表中的因子，并返回一个字符串。</li></ul><hr><h2 id="6-无重复字符的终止子串"><a href="#6-无重复字符的终止子串" class="headerlink" title="6.无重复字符的终止子串"></a>6.无重复字符的终止子串</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个字符串<code>s</code>，请你找出其中不重复字符的 <strong>最长子串</strong> 的长度。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_substring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>s：字符串，表示输入的字符串。</li></ul><p>输出：</p><ul><li>返回一个整数，表示无重复字符的终止子串的长度。</li></ul><p>要求：</p><ul><li>字符串中只包含英文字母、数字和符号。</li><li>终止子串是指从字符串的某个位置开始，到最后一个不重复字符为止的子串。</li><li>考虑大小写是否敏感。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_substring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否合法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;输入必须为字符串&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用滑动窗口解决问题</span></span><br><span class="line">    window = <span class="built_in">set</span>()</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    max_length = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="comment"># 如果右指针指向的字符在窗口中存在，则移动左指针直到窗口中不再存在该字符</span></span><br><span class="line">        <span class="keyword">while</span> s[right] <span class="keyword">in</span> window:</span><br><span class="line">            window.remove(s[left])</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将当前字符加入窗口中</span></span><br><span class="line">        window.add(s[right])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新最大长度</span></span><br><span class="line">        max_length = <span class="built_in">max</span>(max_length, right - left + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> max_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;abcabcbb&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;bbbbb&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;pwwkew&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>length_of_substring</code>函数中，首先检查输入参数<code>s</code>是否为字符串，如果不满足要求则抛出异常。</li><li>使用滑动窗口的思想来解决该问题。维护一个窗口，窗口内的字符是不重复的。</li><li>使用两个指针<code>left</code>和<code>right</code>分别表示窗口的左边界和右边界。</li><li>遍历字符串中的每个字符，如果当前字符已经在窗口中存在，则将左指针向右移动，直到窗口中不再存在该字符。</li><li>将当前字符加入窗口中，并更新最大长度。</li><li>最后返回最大长度。</li></ul><hr><h2 id="7-组合总和"><a href="#7-组合总和" class="headerlink" title="7.组合总和"></a>7.组合总和</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个无重复元素的正整数数组 <code>candidates</code> 和一个目标整数 <code>target</code>，找出数组中所有可以使数字和为 <code>target</code> 的不同组合。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>candidates：一个无重复元素的正整数数组。</li><li>target：目标整数。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可以使数字和为 <code>target</code> 的不同组合。每个组合是一个列表，其中的数字按非递减顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(candidates, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">and</span> num &gt; <span class="number">0</span> <span class="keyword">for</span> num <span class="keyword">in</span> candidates):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;candidates必须是由正整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(target, <span class="built_in">int</span>) <span class="keyword">or</span> target &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;target必须是正整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义结果列表</span></span><br><span class="line">    result = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯算法搜索组合</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">combination, start, target</span>):</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            result.append(combination)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            <span class="keyword">if</span> target &lt; candidates[i]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            backtrack(combination + [candidates[i]], i, target - candidates[i])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排序数组，并调用回溯算法</span></span><br><span class="line">    candidates.sort()</span><br><span class="line">    backtrack([], <span class="number">0</span>, target)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(combination_sum([<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="number">7</span>))</span><br><span class="line"><span class="comment"># 输出：[[2, 2, 3], [7]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(combination_sum([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 输出：[[2, 2, 2, 2], [2, 3, 3], [3, 5]]</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>combination_sum</code>函数中，首先检查输入参数<code>candidates</code>和<code>target</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法搜索所有可能的组合，将搜索过程封装在<code>backtrack</code>函数中。函数接受三个参数：当前组合<code>combination</code>、搜索起始位置<code>start</code>和剩余目标值<code>target</code>。当目标值等于0时，表示找到了一个满足条件的组合，将其添加到结果列表中。否则，遍历候选数字，并逐个尝试添加到组合中，然后继续递归搜索剩余部分。注意，在递归中更新搜索起始位置为当前位置，以确保不重复使用相同的数字。</li><li>在调用回溯算法之前，对候选数组进行排序，以便于去除重复的组合，并使组合中的数字按非递减顺序排列。</li><li>返回结果列表。</li></ul><hr><h2 id="8-全排列"><a href="#8-全排列" class="headerlink" title="8.全排列"></a>8.全排列</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个不含重复数字的数组 <code>nums</code>，返回其所有可能的全排列。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums：一个不含重复数字的整数数组。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可能的全排列。每个排列是一个列表，其中的数字按任意顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums必须是由整数组成的列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义结果列表</span></span><br><span class="line">    result = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯算法生成全排列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start</span>):</span><br><span class="line">        <span class="keyword">if</span> start == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(nums[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">            backtrack(start + <span class="number">1</span>)</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用回溯算法</span></span><br><span class="line">    backtrack(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 输出：[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>permute</code>函数中，首先检查输入参数<code>nums</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法生成所有可能的全排列，将搜索过程封装在<code>backtrack</code>函数中。函数接受一个参数<code>start</code>，表示当前要进行交换的位置。当<code>start</code>等于数组长度时，表示已经生成了一个完整的排列，将其添加到结果列表中。否则，遍历数组中从<code>start</code>位置开始的每个数字，并将其与当前位置交换，然后继续递归生成剩余部分的排列。注意，在递归中恢复交换前的状态，以确保不会对后续的排列造成影响。</li><li>调用回溯算法，初始位置为0。</li><li>返回结果列表。</li></ul><hr><h2 id="9-寻找两个正序数组的中位数"><a href="#9-寻找两个正序数组的中位数" class="headerlink" title="9.寻找两个正序数组的中位数"></a>9.寻找两个正序数组的中位数</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>，请你找出并返回这两个正序数组的中位数。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_median_sorted_arrays</span>(<span class="params">nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums1：一个正序的整数数组。</li><li>nums2：一个正序的整数数组。</li></ul><p>输出：</p><ul><li>返回两个正序数组的中位数。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li><li>算法的时间复杂度应为 <code>O(log (m+n))</code>。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_median_sorted_arrays</span>(<span class="params">nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums1, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums1):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums1必须是由整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums2, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums2):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums2必须是由整数组成的列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并两个有序数组</span></span><br><span class="line">    merged = []</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums1) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(nums2):</span><br><span class="line">        <span class="keyword">if</span> nums1[i] &lt;= nums2[j]:</span><br><span class="line">            merged.append(nums1[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged.append(nums2[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums1):</span><br><span class="line">        merged.append(nums1[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(nums2):</span><br><span class="line">        merged.append(nums2[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算中位数</span></span><br><span class="line">    mid = <span class="built_in">len</span>(merged) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(merged) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (merged[mid - <span class="number">1</span>] + merged[mid]) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> merged[mid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(find_median_sorted_arrays([<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># 输出：2.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_median_sorted_arrays([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="comment"># 输出：2.5</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>find_median_sorted_arrays</code>函数中，首先检查输入参数<code>nums1</code>和<code>nums2</code>是否符合要求，如果不是则抛出异常。</li><li>合并两个有序数组，将其存储在一个新的列表<code>merged</code>中。使用双指针方法分别遍历<code>nums1</code>和<code>nums2</code>，比较指针位置上的元素大小，并将较小的元素添加到<code>merged</code>中。当其中一个指针遍历到数组末尾时，将另一个数组中剩余的元素添加到<code>merged</code>中。</li><li>根据<code>merged</code>的长度确定中位数的位置。如果<code>merged</code>的长度为奇数，则中位数为<code>merged</code>中间位置的元素；如果<code>merged</code>的长度为偶数，则中位数为中间两个位置的元素的平均值。</li><li>返回中位数。</li></ul><hr><h2 id="10-存在重复元素"><a href="#10-存在重复元素" class="headerlink" title="10.存在重复元素"></a>10.存在重复元素</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code>，找出满足下述条件的下标对 <code>(i, j)</code>：</p><ul><li><code>i != j</code></li><li><code>abs(i - j) &lt;= indexDiff</code></li><li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li></ul><p>如果存在满足条件的下标对，返回 <code>True</code>；否则，返回 <code>False</code>。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_nearby_almost_duplicate</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], indexDiff: <span class="built_in">int</span>, valueDiff: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums：一个整数数组。</li><li>indexDiff：一个整数，表示下标之差的最大值。</li><li>valueDiff：一个整数，表示元素之差的最大值。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示是否存在满足条件的下标对。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_nearby_almost_duplicate</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], indexDiff: <span class="built_in">int</span>, valueDiff: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums必须是由整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(indexDiff, <span class="built_in">int</span>) <span class="keyword">or</span> indexDiff &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;indexDiff必须是非负整数&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(valueDiff, <span class="built_in">int</span>) <span class="keyword">or</span> valueDiff &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;valueDiff必须是非负整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用滑动窗口解决问题</span></span><br><span class="line">    window = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> i &gt; indexDiff:</span><br><span class="line">            window.remove(nums[i - indexDiff - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> window:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(j - nums[i]) &lt;= valueDiff:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        window.add(nums[i])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>contains_nearby_almost_duplicate</code>函数中，首先检查输入参数<code>nums</code>、<code>indexDiff</code>和<code>valueDiff</code>是否符合要求，如果不是则抛出异常。</li><li>使用滑动窗口的方法来解决问题。维护一个集合<code>window</code>，它表示当前窗口内的元素。遍历数组<code>nums</code>，对于每个元素，将其添加到<code>window</code>中，并判断是否存在满足条件的下标对。如果存在，则返回<code>True</code>；否则，将窗口最左侧的元素移除，并继续遍历下一个元素。</li><li>返回<code>False</code>，表示不存在满足条件的下标对。</li></ul><div style="border-top: 2px dotted #8e8e8e96;height: 0px;margin: 20px 0px;text-align: center;width: 100%;"><span style="background-color: #23b7e5;color: #fff;padding: 6px 10px;position: relative;top: -14px;border-radius: 14px;">END</span></div><blockquote><div class="tt-license" style="font-weight: 600; font-size: 12px;"><p style="margin-bottom: 10px;"> <span class="tt-license-icon" style="margin-right: 5px; vertical-align: middle;">   <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-award">     <circle cx="12" cy="8" r="7"/>     <polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"/>   </svg> </span> 本文标题：值得苦练的Python经典题目（一）</p><p style="margin-bottom: 10px;"> <span class="tt-license-icon" style="margin-right: 5px; vertical-align: middle;">   <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link">     <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>     <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>   </svg> </span> 本文作者：拾三</p><p style="margin-bottom: 10px;"> <span class="tt-license-icon" style="margin-right: 5px; vertical-align: middle;">   <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield">     <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>   </svg> </span> 除非另有说明，本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>。</p><p> <span class="tt-license-icon" style="margin-right: 5px; vertical-align: middle;">   <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-alert-circle">     <circle cx="12" cy="12" r="10"/>     <line x1="12" y1="8" x2="12" y2="12"/>     <line x1="12" y1="16" x2="12.01" y2="16"/>   </svg> </span> 声明：未经本人允许禁止转载。</p></div></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
