<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>值得苦练的Python经典题目（二）</title>
      <link href="/posts/3331801880/"/>
      <url>/posts/3331801880/</url>
      
        <content type="html"><![CDATA[<h2 id="1杨辉三角"><a class="markdownIt-Anchor" href="#1杨辉三角"></a> 1.杨辉三角</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>杨辉三角，又称帕斯卡三角，是一个由数字构成的三角形，其中的数字具有以下规律：每个数字都是它上方两个数字的和。</p></blockquote><span id="more"></span><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_pascals_triangle</span><span class="token punctuation">(</span>rows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>rows：一个正整数，表示生成杨辉三角的行数。</li></ul><p>输出：</p><ul><li>返回一个生成的杨辉三角。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_pascals_triangle</span><span class="token punctuation">(</span>rows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为正整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> rows <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为正整数"</span><span class="token punctuation">)</span>        triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">==</span> i <span class="token keyword">else</span> row<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> row<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        triangle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        <span class="token keyword">return</span> triangle<span class="token keyword">def</span> <span class="token function">print_pascals_triangle</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_width <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> triangle<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> triangle<span class="token punctuation">:</span>        row_str <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row_str<span class="token punctuation">.</span>center<span class="token punctuation">(</span>max_width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 测试用例</span>print_pascals_triangle<span class="token punctuation">(</span>generate_pascals_triangle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出    1       1 1     1 2 1   1 3 3 1 1 4 6 4 1'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>generate_pascals_triangle</code>函数中，首先检查输入参数<code>rows</code>是否为正整数，如果不是则抛出异常。</li><li>然后使用循环来逐行生成杨辉三角，每行的数字是根据规律计算得到的，其中第一个和最后一个数字都为1，其余数字为上一行对应位置和前一个位置的数字之和。</li><li>返回一个生成的杨辉三角。</li></ul><hr><h2 id="2fizz-buzz游戏"><a class="markdownIt-Anchor" href="#2fizz-buzz游戏"></a> 2.Fizz Buzz游戏</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>Fizz Buzz是一个简单的数字游戏，游戏规则如下：从1开始，逐个数数，当遇到3的倍数时，报&quot;Fizz&quot;，当遇到5的倍数时，报&quot;Buzz&quot;，当遇到即是3的倍数又是5的倍数时，报&quot;Fizz Buzz&quot;，其他情况报当前数字。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fizz_buzz_game</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入：</p><ul><li>n：一个正整数，表示游戏进行的次数。</li></ul><p>输出：</p><ul><li>返回一个包含n个字符串的列表，表示游戏中每次数数得到的结果。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fizz_buzz_game</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为正整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为正整数"</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"Fizz Buzz"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"Fizz"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"Buzz"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>fizz_buzz_game<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'Fizz Buzz']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>fizz_buzz_game</code>函数中，首先检查输入参数<code>n</code>是否为正整数，如果不是则抛出异常。</li><li>然后使用循环从1到n进行遍历，根据游戏规则判断每个数字的情况，并将相应的结果添加到结果列表中。</li><li>返回包含游戏结果的字符串列表。</li></ul><hr><h2 id="3分发饼干游戏"><a class="markdownIt-Anchor" href="#3分发饼干游戏"></a> 3.分发饼干游戏</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p></blockquote><p><span style="background-color: #4FB33B; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">思路</span>：使用贪心算法来尽可能满足更多的孩子。</p><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_max_satisfied_children</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>g：一个整数列表，表示每个孩子的胃口值。</li><li>s：一个整数列表，表示每块饼干的尺寸。</li></ul><p>输出：</p><ul><li>返回一个整数，表示能够满足的最大孩子数量。</li></ul><p>要求：</p><ul><li>输入的两个列表长度不超过1000，列表元素为正整数。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_max_satisfied_children</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># 将两个列表排序</span>    g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        satisfied_children <span class="token operator">=</span> <span class="token number">0</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            satisfied_children <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> satisfied_children<span class="token comment"># 测试示例</span>g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>find_max_satisfied_children<span class="token punctuation">(</span>g<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：1</span><span class="token triple-quoted-string string">'''解释：你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>find_max_satisfied_children</code>函数中，首先将两个列表<code>g</code>和<code>s</code>分别排序，以便从小到大进行匹配。</li><li>使用贪心算法，使用两个指针<code>i</code>和<code>j</code>分别遍历<code>g</code>和<code>s</code>，当<code>j</code>对应的饼干尺寸能够满足<code>i</code>对应孩子的胃口时，增加满足孩子的数量，并将两个指针都向后移动。</li><li>返回能够满足的最大孩子数量。</li></ul><hr><h2 id="4盛最多水的容器"><a class="markdownIt-Anchor" href="#4盛最多水的容器"></a> 4.盛最多水的容器</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>**说明：**你不能倾斜容器。</p></blockquote><p><span style="background-color: #4FB33B; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">思路</span>：使用双指针法来求解可以容纳最多水的容器。</p><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_area</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>height：一个整数列表，表示每个垂线的高度。</li></ul><p>输出：</p><ul><li>返回一个整数，表示容器可以储存的最大水量。</li></ul><p>要求：</p><ul><li>输入的列表长度不超过10000，列表元素为非负整数。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_area</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    max_water <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        h_left<span class="token punctuation">,</span> h_right <span class="token operator">=</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        width <span class="token operator">=</span> right <span class="token operator">-</span> left        curr_water <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>h_left<span class="token punctuation">,</span> h_right<span class="token punctuation">)</span> <span class="token operator">*</span> width        max_water <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_water<span class="token punctuation">,</span> curr_water<span class="token punctuation">)</span>                <span class="token keyword">if</span> h_left <span class="token operator">&lt;</span> h_right<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> max_water<span class="token comment"># 测试示例</span>height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max_area<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：49</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>max_area</code>函数中，使用双指针法来求解可以容纳最多水的容器。</li><li>初始化左指针<code>left</code>为0，右指针<code>right</code>为<code>height</code>列表的最后一个元素索引。</li><li>使用<code>h_left</code>和<code>h_right</code>分别表示左右指针所指垂线的高度，<code>width</code>表示两个指针之间的宽度。</li><li>计算当前容器的水量<code>curr_water</code>，并与已记录的最大水量<code>max_water</code>比较，取较大值。</li><li>如果左指针所指垂线高度小于右指针所指垂线高度，则将左指针向右移动，否则将右指针向左移动。</li><li>返回容器可以储存的最大水量。</li></ul><hr><h2 id="5最长递增子序列"><a class="markdownIt-Anchor" href="#5最长递增子序列"></a> 5.最长递增子序列</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">length_of_lis</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>nums：整数列表</li></ul><p>输出：</p><ul><li>返回一个整数，表示最长递增子序列的长度。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">length_of_lis</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_lis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：4</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_lis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：4</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_lis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>length_of_lis</code>函数中，首先判断输入的数组<code>nums</code>是否为空，如果为空，则直接返回0。</li><li>创建一个动态规划数组<code>dp</code>，长度为输入数组<code>nums</code>的长度，并将每个位置的初始值设为1。</li><li>遍历数组<code>nums</code>，对于每个位置<code>i</code>(0 &lt;= i &lt; n)，再遍历位置<code>i</code>之前的每个位置<code>j</code>(0 &lt;= j &lt; i)。</li><li>如果<code>nums[i] &gt; nums[j]</code>，则说明<code>nums[i]</code>可以接在<code>nums[j]</code>后面形成一个递增子序列，此时更新<code>dp[i]</code>的值为<code>dp[j] + 1</code>，表示以<code>nums[i]</code>结尾的最长递增子序列的长度。</li><li>最后返回<code>dp</code>数组中的最大值，即为最长递增子序列的长度。</li></ul><hr><h2 id="6超级丑数"><a class="markdownIt-Anchor" href="#6超级丑数"></a> 6.超级丑数</h2><blockquote><p><strong>超级丑数</strong> 是一个正整数，并满足其所有质因数都出现在质数数组 <code>primes</code> 中。</p><p>给你一个整数 <code>n</code> 和一个整数数组 <code>primes</code> ，返回第 <code>n</code> 个 <strong>超级丑数</strong> 。</p><p>题目数据保证第 <code>n</code> 个 <strong>超级丑数</strong> 在 <strong>32-bit</strong> 带符号整数范围内。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nth_super_ugly_number</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> primes<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>n：整数，表示要求的超级丑数的位置，1 &lt;= n &lt;= 10^6</li><li>primes：整数列表，表示质数数组，其中的每个元素都是质数，2 &lt;= len(primes) &lt;= 100，2 &lt;= primes[i] &lt;= 10^9</li></ul><p>输出：</p><ul><li>返回一个整数，表示第 <code>n</code> 个超级丑数。</li></ul><p>要求：</p><ul><li>时间复杂度应控制在合理范围内，以保证运行效率。</li><li>考虑到 <code>n</code> 和 <code>primes</code> 的规模，可以使用最小堆和指针数组来优化计算过程。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">nth_super_ugly_number</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> primes<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># 定义一个指针数组，用于记录每个质数对应的当前最小丑数的下标</span>    pointers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span>        <span class="token comment"># 初始化结果数组和最小堆</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    min_heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>prime<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> prime <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 生成超级丑数</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token comment"># 取出当前最小的丑数及其对应的质数下标</span>        num<span class="token punctuation">,</span> idx <span class="token operator">=</span> min_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment"># 更新指针数组中对应质数的下标</span>        pointers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment"># 如果当前丑数与前一个丑数相同，跳过</span>        <span class="token keyword">if</span> num <span class="token operator">!=</span> result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                <span class="token comment"># 更新最小堆</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> result<span class="token punctuation">[</span>pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">:</span>                pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            min_heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> result<span class="token punctuation">[</span>pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>                <span class="token comment"># 调整最小堆，保持堆有序</span>        heapify<span class="token punctuation">(</span>min_heap<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>nth_super_ugly_number<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：32</span><span class="token keyword">print</span><span class="token punctuation">(</span>nth_super_ugly_number<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：6</span><span class="token keyword">print</span><span class="token punctuation">(</span>nth_super_ugly_number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在 <code>nth_super_ugly_number</code> 函数中，首先定义一个指针数组 <code>pointers</code>，用于记录每个质数对应的当前最小丑数的下标。</li><li>初始化结果数组 <code>result</code> 和最小堆 <code>min_heap</code>，最小堆中的每个元素都是 <code>(prime, i)</code> 的形式，表示质数和其对应的下标。</li><li>进入循环，直到结果数组的长度等于 <code>n</code> 时停止。</li><li>在每次循环中，取出当前最小的丑数 <code>num</code> 及其对应的质数下标 <code>idx</code>。</li><li>更新指针数组中对应质数的下标，将其加1。</li><li>如果当前丑数与前一个丑数相同，跳过，只有当丑数不同时才将其添加到结果数组中。</li><li>更新最小堆，对于每个质数，将其乘以对应丑数的下一个丑数，并更新该质数在最小堆中的位置。</li><li>调整最小堆，保持堆有序。</li><li>返回结果数组中的最后一个元素，即为第 <code>n</code> 个超级丑数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值得苦练的Python经典题目（一）</title>
      <link href="/posts/4135694272/"/>
      <url>/posts/4135694272/</url>
      
        <content type="html"><![CDATA[<h2 id="1求最大公约数和最小公倍数"><a class="markdownIt-Anchor" href="#1求最大公约数和最小公倍数"></a> 1.求最大公约数和最小公倍数</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><span id="more"></span><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd_lcm</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">tuple</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>num1：整数</li><li>num2：整数</li></ul><p>输出：</p><ul><li>返回一个包含两个元素的元组，第一个元素表示最大公约数，第二个元素表示最小公倍数。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li><li>返回的结果应为非负整数。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd_lcm</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">tuple</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为正整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> num1 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> num2 <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为正整数"</span><span class="token punctuation">)</span>        <span class="token comment"># 计算最大公约数</span>    <span class="token keyword">def</span> <span class="token function">compute_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b        <span class="token keyword">return</span> a        <span class="token comment"># 计算最小公倍数</span>    <span class="token keyword">def</span> <span class="token function">compute_lcm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">//</span> compute_gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        <span class="token comment"># 返回结果</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>compute_gcd<span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">,</span> compute_lcm<span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>gcd_lcm<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：(6, 36)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gcd_lcm<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：(5, 60)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>gcd_lcm</code>函数中，首先检查输入参数<code>num1</code>和<code>num2</code>是否为正整数，如果不是则抛出异常。</li><li>然后使用辗转相除法计算最大公约数，将计算公约数的逻辑封装在<code>compute_gcd</code>函数中。</li><li>最后通过计算最大公约数和输入参数的乘积除以最大公约数得到最小公倍数，将计算最小公倍数的逻辑封装在<code>compute_lcm</code>函数中。</li><li>返回一个包含最大公约数和最小公倍数的元组。</li></ul><hr><h2 id="2斐波那契数列"><a class="markdownIt-Anchor" href="#2斐波那契数列"></a> 2.斐波那契数列</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……。</p><p>在数学上，斐波那契数列以递归的方法来定义：</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\left\{\begi…">\begin{equation}\left\{\begin{array}{ll}F(0)=0 \\F(1)=1 &amp;&amp; (\boldsymbol{n} \in N) \\F(\boldsymbol{n})=F(\boldsymbol{n}-1)+F(\boldsymbol{n}+1)\end{array}\right.\end{equation}</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>num：非负整数，表示要返回的斐波那契数列的索引位置。</li></ul><p>输出：</p><ul><li>返回第n个斐波那契数列的值。</li></ul><p>要求：</p><ul><li>如果输入的参数不是非负整数，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为非负整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为非负整数"</span><span class="token punctuation">)</span>    <span class="token comment"># 计算斐波那契数列</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        <span class="token keyword">return</span> b<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：0</span><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：1</span><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>fibonacci</code>函数中，首先检查输入参数<code>n</code>是否为非负整数，如果不是则抛出异常。</li><li>使用迭代的方式计算第n个斐波那契数列的值。使用两个变量<code>a</code>和<code>b</code>分别表示前一个斐波那契数列的值和当前斐波那契数列的值。</li><li>如果n为0，则返回0；如果n为1，则返回1；否则，通过迭代计算得到第n个斐波那契数列的值。</li><li>返回第n个斐波那契数列的值。</li></ul><hr><h2 id="3求前n阶乘的和"><a class="markdownIt-Anchor" href="#3求前n阶乘的和"></a> 3.求前n阶乘的和</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>比如求1+2!+3!+…+20!的和。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>num：正整数，表示要求前n阶乘的和。<font color="red">注意：</font>不要输入太大的的n，防止数据过大造成电脑卡死。</li></ul><p>输出：</p><ul><li>返回前n阶乘的和。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial_sum</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为正整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为正整数"</span><span class="token punctuation">)</span>    <span class="token comment"># 计算前n阶乘的和</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">*=</span> i        a <span class="token operator">+=</span> b        <span class="token keyword">return</span> a<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorial_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：1</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorial_sum<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：3 (1! + 2!)</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorial_sum<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：153 (1! + 2! + 3! + 4! + 5!)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>factorial_sum</code>函数中，首先检查输入参数<code>num</code>是否为正整数，如果不是则抛出异常。</li><li>使用循环计算前<code>num</code>阶乘的和。使用变量<code>a</code>来保存结果，初始值为0，变量<code>b</code>用于计算阶乘的值，初始值为1。在每次迭代中，<code>b</code>表示当前阶乘的值，通过乘以<code>i</code>来更新；<code>a</code>表示前<code>num</code>个阶乘的和，通过累加<code>b</code>到<code>a</code>中来更新。</li><li>返回前<code>num</code>阶乘的和。</li></ul><hr><h2 id="4判断年份是否是闰年"><a class="markdownIt-Anchor" href="#4判断年份是否是闰年"></a> 4.判断年份是否是闰年</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>判断该年年份是闰年的条件：</p><ul><li><strong>能被4整除，但不能被100整除</strong></li><li><strong>能被400整除</strong></li></ul></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_leap_year</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>year：整数，表示要判断的年份。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示给定年份是否为闰年。如果是闰年，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><p>要求：</p><ul><li>如果输入的参数不是整数，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_leap_year</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为整数</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为整数"</span><span class="token punctuation">)</span>    <span class="token comment"># 判断是否为闰年</span>    <span class="token keyword">if</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">elif</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">elif</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap_year<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap_year<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap_year<span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap_year<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>is_leap_year</code>函数中，首先检查输入参数<code>year</code>是否为整数，如果不是则抛出异常。</li><li>使用条件判断来判断给定年份是否为闰年。根据闰年的定义，满足以下条件之一即可：<ul><li>能被400整除；</li><li>能被4整除但不能被100整除。</li></ul></li><li>根据条件依次判断，并返回相应的布尔值。如果满足条件，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><hr><h2 id="5因式分解"><a class="markdownIt-Anchor" href="#5因式分解"></a> 5.因式分解</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>因式分解是将一个数表示为几个因子的乘积的过程，例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>=</mo><mn>2</mn><mo>×</mo><mn>5</mn><mtext>，</mtext><mn>60</mn><mo>=</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">10=2\times5，60=2\times2\times3\times5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord cjk_fallback">，</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>等。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorize</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>num：正整数，要进行因式分解的数，要求小于1000。</li></ul><p>输出：</p><ul><li>返回一个字符串，表示因式分解的结果。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数或大于等于1000，函数应抛出异常。</li><li>结果中的因子按照从小到大的顺序排列，并以<code>*</code>符号连接。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorize</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否为正整数，并且小于1000</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> num <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"参数必须为正整数且小于1000"</span><span class="token punctuation">)</span>        <span class="token comment"># 因式分解</span>    factors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    divisor <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            factors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">)</span>            num <span class="token operator">/=</span> divisor        <span class="token keyword">else</span><span class="token punctuation">:</span>            divisor <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 返回结果</span>    <span class="token keyword">return</span> <span class="token string">'*'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorize<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：2*2*3</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorize<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：2*2*3*3</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorize<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：2*3*3*5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>factorize</code>函数中，首先检查输入参数<code>num</code>是否为正整数且小于1000，如果不满足要求则抛出异常。</li><li>使用一个循环来进行因式分解，每次找到一个能整除<code>num</code>的最小素数，并将其作为因子添加到结果列表中。然后将<code>num</code>除以该因子，继续寻找下一个因子，直到<code>num</code>等于1为止。</li><li>最后使用<code>*</code>符号连接结果列表中的因子，并返回一个字符串。</li></ul><hr><h2 id="6无重复字符的终止子串"><a class="markdownIt-Anchor" href="#6无重复字符的终止子串"></a> 6.无重复字符的终止子串</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个字符串<code>s</code>，请你找出其中不重复字符的 <strong>最长子串</strong> 的长度。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">length_of_substring</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入：</p><ul><li>s：字符串，表示输入的字符串。</li></ul><p>输出：</p><ul><li>返回一个整数，表示无重复字符的终止子串的长度。</li></ul><p>要求：</p><ul><li>字符串中只包含英文字母、数字和符号。</li><li>终止子串是指从字符串的某个位置开始，到最后一个不重复字符为止的子串。</li><li>考虑大小写是否敏感。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">length_of_substring</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否合法</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"输入必须为字符串"</span><span class="token punctuation">)</span>        <span class="token comment"># 使用滑动窗口解决问题</span>    window <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    left <span class="token operator">=</span> <span class="token number">0</span>    max_length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果右指针指向的字符在窗口中存在，则移动左指针直到窗口中不再存在该字符</span>        <span class="token keyword">while</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">in</span> window<span class="token punctuation">:</span>            window<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>            left <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment"># 将当前字符加入窗口中</span>        window<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 更新最大长度</span>        max_length <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 返回结果</span>    <span class="token keyword">return</span> max_length<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_substring<span class="token punctuation">(</span><span class="token string">"abcabcbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：3</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_substring<span class="token punctuation">(</span><span class="token string">"bbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：1</span><span class="token keyword">print</span><span class="token punctuation">(</span>length_of_substring<span class="token punctuation">(</span><span class="token string">"pwwkew"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>length_of_substring</code>函数中，首先检查输入参数<code>s</code>是否为字符串，如果不满足要求则抛出异常。</li><li>使用滑动窗口的思想来解决该问题。维护一个窗口，窗口内的字符是不重复的。</li><li>使用两个指针<code>left</code>和<code>right</code>分别表示窗口的左边界和右边界。</li><li>遍历字符串中的每个字符，如果当前字符已经在窗口中存在，则将左指针向右移动，直到窗口中不再存在该字符。</li><li>将当前字符加入窗口中，并更新最大长度。</li><li>最后返回最大长度。</li></ul><hr><h2 id="7组合总和"><a class="markdownIt-Anchor" href="#7组合总和"></a> 7.组合总和</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个无重复元素的正整数数组 <code>candidates</code> 和一个目标整数 <code>target</code>，找出数组中所有可以使数字和为 <code>target</code> 的不同组合。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">combination_sum</span><span class="token punctuation">(</span>candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入：</p><ul><li>candidates：一个无重复元素的正整数数组。</li><li>target：目标整数。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可以使数字和为 <code>target</code> 的不同组合。每个组合是一个列表，其中的数字按非递减顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">combination_sum</span><span class="token punctuation">(</span>candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否符合要求</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">and</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> candidates<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"candidates必须是由正整数组成的列表"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> target <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"target必须是正整数"</span><span class="token punctuation">)</span>    <span class="token comment"># 定义结果列表</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 回溯算法搜索组合</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>combination<span class="token punctuation">,</span> start<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>combination<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            backtrack<span class="token punctuation">(</span>combination <span class="token operator">+</span> <span class="token punctuation">[</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 排序数组，并调用回溯算法</span>    candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    backtrack<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>combination_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：[[2, 2, 3], [7]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>combination_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：[[2, 2, 2, 2], [2, 3, 3], [3, 5]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>combination_sum</code>函数中，首先检查输入参数<code>candidates</code>和<code>target</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法搜索所有可能的组合，将搜索过程封装在<code>backtrack</code>函数中。函数接受三个参数：当前组合<code>combination</code>、搜索起始位置<code>start</code>和剩余目标值<code>target</code>。当目标值等于0时，表示找到了一个满足条件的组合，将其添加到结果列表中。否则，遍历候选数字，并逐个尝试添加到组合中，然后继续递归搜索剩余部分。注意，在递归中更新搜索起始位置为当前位置，以确保不重复使用相同的数字。</li><li>在调用回溯算法之前，对候选数组进行排序，以便于去除重复的组合，并使组合中的数字按非递减顺序排列。</li><li>返回结果列表。</li></ul><hr><h2 id="8全排列"><a class="markdownIt-Anchor" href="#8全排列"></a> 8.全排列</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个不含重复数字的数组 <code>nums</code>，返回其所有可能的全排列。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入：</p><ul><li>nums：一个不含重复数字的整数数组。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可能的全排列。每个排列是一个列表，其中的数字按任意顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否符合要求</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"nums必须是由整数组成的列表"</span><span class="token punctuation">)</span>    <span class="token comment"># 定义结果列表</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 回溯算法生成全排列</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>            backtrack<span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>        <span class="token comment"># 调用回溯算法</span>    backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>permute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>permute</code>函数中，首先检查输入参数<code>nums</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法生成所有可能的全排列，将搜索过程封装在<code>backtrack</code>函数中。函数接受一个参数<code>start</code>，表示当前要进行交换的位置。当<code>start</code>等于数组长度时，表示已经生成了一个完整的排列，将其添加到结果列表中。否则，遍历数组中从<code>start</code>位置开始的每个数字，并将其与当前位置交换，然后继续递归生成剩余部分的排列。注意，在递归中恢复交换前的状态，以确保不会对后续的排列造成影响。</li><li>调用回溯算法，初始位置为0。</li><li>返回结果列表。</li></ul><hr><h2 id="9寻找两个正序数组的中位数"><a class="markdownIt-Anchor" href="#9寻找两个正序数组的中位数"></a> 9.寻找两个正序数组的中位数</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>，请你找出并返回这两个正序数组的中位数。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">find_median_sorted_arrays</span><span class="token punctuation">(</span>nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入：</p><ul><li>nums1：一个正序的整数数组。</li><li>nums2：一个正序的整数数组。</li></ul><p>输出：</p><ul><li>返回两个正序数组的中位数。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li><li>算法的时间复杂度应为 <code>O(log (m+n))</code>。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">find_median_sorted_arrays</span><span class="token punctuation">(</span>nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否符合要求</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"nums1必须是由整数组成的列表"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"nums2必须是由整数组成的列表"</span><span class="token punctuation">)</span>    <span class="token comment"># 合并两个有序数组</span>    merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">:</span>        merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 计算中位数</span>    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>merged<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> merged<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> merged<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>find_median_sorted_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：2.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>find_median_sorted_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>find_median_sorted_arrays</code>函数中，首先检查输入参数<code>nums1</code>和<code>nums2</code>是否符合要求，如果不是则抛出异常。</li><li>合并两个有序数组，将其存储在一个新的列表<code>merged</code>中。使用双指针方法分别遍历<code>nums1</code>和<code>nums2</code>，比较指针位置上的元素大小，并将较小的元素添加到<code>merged</code>中。当其中一个指针遍历到数组末尾时，将另一个数组中剩余的元素添加到<code>merged</code>中。</li><li>根据<code>merged</code>的长度确定中位数的位置。如果<code>merged</code>的长度为奇数，则中位数为<code>merged</code>中间位置的元素；如果<code>merged</code>的长度为偶数，则中位数为中间两个位置的元素的平均值。</li><li>返回中位数。</li></ul><hr><h2 id="10存在重复元素"><a class="markdownIt-Anchor" href="#10存在重复元素"></a> 10.存在重复元素</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code>，找出满足下述条件的下标对 <code>(i, j)</code>：</p><ul><li><code>i != j</code></li><li><code>abs(i - j) &lt;= indexDiff</code></li><li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li></ul><p>如果存在满足条件的下标对，返回 <code>True</code>；否则，返回 <code>False</code>。</p></blockquote><p>函数签名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">contains_nearby_almost_duplicate</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> indexDiff<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> valueDiff<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入：</p><ul><li>nums：一个整数数组。</li><li>indexDiff：一个整数，表示下标之差的最大值。</li><li>valueDiff：一个整数，表示元素之差的最大值。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示是否存在满足条件的下标对。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">def</span> <span class="token function">contains_nearby_almost_duplicate</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> indexDiff<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> valueDiff<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token comment"># 检查输入参数是否符合要求</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"nums必须是由整数组成的列表"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>indexDiff<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> indexDiff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"indexDiff必须是非负整数"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>valueDiff<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> valueDiff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"valueDiff必须是非负整数"</span><span class="token punctuation">)</span>    <span class="token comment"># 使用滑动窗口解决问题</span>    window <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">></span> indexDiff<span class="token punctuation">:</span>            window<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> indexDiff <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> window<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> valueDiff<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        window<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># 测试示例</span><span class="token keyword">print</span><span class="token punctuation">(</span>contains_nearby_almost_duplicate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>contains_nearby_almost_duplicate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>contains_nearby_almost_duplicate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>在<code>contains_nearby_almost_duplicate</code>函数中，首先检查输入参数<code>nums</code>、<code>indexDiff</code>和<code>valueDiff</code>是否符合要求，如果不是则抛出异常。</li><li>使用滑动窗口的方法来解决问题。维护一个集合<code>window</code>，它表示当前窗口内的元素。遍历数组<code>nums</code>，对于每个元素，将其添加到<code>window</code>中，并判断是否存在满足条件的下标对。如果存在，则返回<code>True</code>；否则，将窗口最左侧的元素移除，并继续遍历下一个元素。</li><li>返回<code>False</code>，表示不存在满足条件的下标对。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片放大测试</title>
      <link href="/posts/2523874997/"/>
      <url>/posts/2523874997/</url>
      
        <content type="html"><![CDATA[<h1 id="标题1"><a class="markdownIt-Anchor" href="#标题1"></a> 标题1</h1><h2 id="标题2"><a class="markdownIt-Anchor" href="#标题2"></a> 标题2</h2><h3 id="标题3"><a class="markdownIt-Anchor" href="#标题3"></a> 标题3</h3><h4 id="标题4"><a class="markdownIt-Anchor" href="#标题4"></a> 标题4</h4><h5 id="标题5"><a class="markdownIt-Anchor" href="#标题5"></a> 标题5</h5><h6 id="标题6"><a class="markdownIt-Anchor" href="#标题6"></a> 标题6</h6><span id="more"></span><table><thead><tr><th style="text-align:right">123</th><th style="text-align:center">21312</th><th style="text-align:left">333</th></tr></thead><tbody><tr><td style="text-align:right">123</td><td style="text-align:center">123</td><td style="text-align:left">312</td></tr><tr><td style="text-align:right">555</td><td style="text-align:center">23123</td><td style="text-align:left">23112</td></tr><tr><td style="text-align:right">444</td><td style="text-align:center">223</td><td style="text-align:left">12312</td></tr></tbody></table><div class="admonition error"><p class="admonition-title">测试</p><p>123</p></div><blockquote><h3 id="支持的类型"><a class="markdownIt-Anchor" href="#支持的类型"></a> 支持的类型</h3><p>提示类型 <code>type</code> 将用作 CSS 类名称，暂支持如下类型：</p><ul><li><code>note</code></li><li><code>info, todo</code></li><li><code>warning, attention, caution</code></li><li><code>error, failure, missing, fail</code></li></ul></blockquote><p><div style="text-align: center"><img src="/posts/2523874997/68747470733a2f2f7069632e6c69786c2e636e2f323032302f696d6167652d32303230303431393233323333373933372e706e67.png" alt="无标题警告提示块"><span class="image-caption" style="display: inline-block; color: #9E9898; font-weight: bold; font-size: 12px; margin-top: 5px;">无标题警告提示块</span></div></p><p><div style="text-align: center"><img src="/posts/2523874997/1526527927.png" alt="img"><span class="image-caption" style="display: inline-block; color: #9E9898; font-weight: bold; font-size: 12px; margin-top: 5px;">img</span></div></p><p><div style="text-align: center"><img src="/posts/2523874997/2.png" alt="嵌套效果"><span class="image-caption" style="display: inline-block; color: #9E9898; font-weight: bold; font-size: 12px; margin-top: 5px;">嵌套效果</span></div></p><p>😂<br><div style="text-align: center"><img src="/posts/2523874997/1.png" alt="这是一个图片用例"><span class="image-caption" style="display: inline-block; color: #9E9898; font-weight: bold; font-size: 12px; margin-top: 5px;">这是一个图片用例</span></div><br>哈哈哈哈<br>测试一下</p>]]></content>
      
      
      <categories>
          
          <category> 优化博客 </category>
          
          <category> test </category>
          
          <category> 123 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
