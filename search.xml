<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图片放大测试</title>
      <link href="/posts/2523874997/"/>
      <url>/posts/2523874997/</url>
      
        <content type="html"><![CDATA[<h1 id="标题1"><a class="markdownIt-Anchor" href="#标题1"></a> 标题1</h1><h2 id="标题2"><a class="markdownIt-Anchor" href="#标题2"></a> 标题2</h2><h3 id="标题3"><a class="markdownIt-Anchor" href="#标题3"></a> 标题3</h3><h4 id="标题4"><a class="markdownIt-Anchor" href="#标题4"></a> 标题4</h4><h5 id="标题5"><a class="markdownIt-Anchor" href="#标题5"></a> 标题5</h5><h6 id="标题6"><a class="markdownIt-Anchor" href="#标题6"></a> 标题6</h6><p><div style="text-align: center"><img src="/posts/2523874997/1.png" alt="这是一个图片用例"><span class="image-caption" style="display: inline-block; color: #9E9898; font-weight: bold; font-size: 12px; margin-top: 5px;">这是一个图片用例</span></div></p>]]></content>
      
      
      <categories>
          
          <category> 优化博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值得苦练的Python经典题目（一）</title>
      <link href="/posts/4135694272/"/>
      <url>/posts/4135694272/</url>
      
        <content type="html"><![CDATA[<h2 id="1求最大公约数和最小公倍数"><a class="markdownIt-Anchor" href="#1求最大公约数和最小公倍数"></a> 1.求最大公约数和最小公倍数</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_lcm</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num1：整数</li><li>num2：整数</li></ul><p>输出：</p><ul><li>返回一个包含两个元素的元组，第一个元素表示最大公约数，第二个元素表示最小公倍数。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li><li>返回的结果应为非负整数。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_lcm</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num1, <span class="built_in">int</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num2, <span class="built_in">int</span>) <span class="keyword">or</span> num1 &lt;= <span class="number">0</span> <span class="keyword">or</span> num2 &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算最大公约数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            a, b = b, a % b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算最小公倍数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(a * b) // compute_gcd(a, b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> (compute_gcd(num1, num2), compute_lcm(num1, num2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(gcd_lcm(<span class="number">12</span>, <span class="number">18</span>))</span><br><span class="line"><span class="comment"># 输出：(6, 36)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gcd_lcm(<span class="number">15</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 输出：(5, 60)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>gcd_lcm</code>函数中，首先检查输入参数<code>num1</code>和<code>num2</code>是否为正整数，如果不是则抛出异常。</li><li>然后使用辗转相除法计算最大公约数，将计算公约数的逻辑封装在<code>compute_gcd</code>函数中。</li><li>最后通过计算最大公约数和输入参数的乘积除以最大公约数得到最小公倍数，将计算最小公倍数的逻辑封装在<code>compute_lcm</code>函数中。</li><li>返回一个包含最大公约数和最小公倍数的元组。</li></ul><hr><h2 id="2斐波那契数列"><a class="markdownIt-Anchor" href="#2斐波那契数列"></a> 2.斐波那契数列</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……。</p><p>在数学上，斐波那契数列以递归的方法来定义：</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\left\{\begi…">\begin{equation}\left\{\begin{array}{ll}F(0)=0 \\F(1)=1 &amp;&amp; (\boldsymbol{n} \in N) \\F(\boldsymbol{n})=F(\boldsymbol{n}-1)+F(\boldsymbol{n}+1)\end{array}\right.\end{equation}</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：非负整数，表示要返回的斐波那契数列的索引位置。</li></ul><p>输出：</p><ul><li>返回第n个斐波那契数列的值。</li></ul><p>要求：</p><ul><li>如果输入的参数不是非负整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为非负整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>) <span class="keyword">or</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为非负整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算斐波那契数列</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 输出：55</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>fibonacci</code>函数中，首先检查输入参数<code>n</code>是否为非负整数，如果不是则抛出异常。</li><li>使用迭代的方式计算第n个斐波那契数列的值。使用两个变量<code>a</code>和<code>b</code>分别表示前一个斐波那契数列的值和当前斐波那契数列的值。</li><li>如果n为0，则返回0；如果n为1，则返回1；否则，通过迭代计算得到第n个斐波那契数列的值。</li><li>返回第n个斐波那契数列的值。</li></ul><hr><h2 id="3求前n阶乘的和"><a class="markdownIt-Anchor" href="#3求前n阶乘的和"></a> 3.求前n阶乘的和</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>比如求1+2!+3!+…+20!的和。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_sum</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：正整数，表示要求前n阶乘的和。<font color="red">注意：</font>不要输入太大的的n，防止数据过大造成电脑卡死。</li></ul><p>输出：</p><ul><li>返回前n阶乘的和。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_sum</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">or</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算前n阶乘的和</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        b *= i</span><br><span class="line">        a += b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 输出：3 (1! + 2!)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial_sum(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出：153 (1! + 2! + 3! + 4! + 5!)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>factorial_sum</code>函数中，首先检查输入参数<code>num</code>是否为正整数，如果不是则抛出异常。</li><li>使用循环计算前<code>num</code>阶乘的和。使用变量<code>a</code>来保存结果，初始值为0，变量<code>b</code>用于计算阶乘的值，初始值为1。在每次迭代中，<code>b</code>表示当前阶乘的值，通过乘以<code>i</code>来更新；<code>a</code>表示前<code>num</code>个阶乘的和，通过累加<code>b</code>到<code>a</code>中来更新。</li><li>返回前<code>num</code>阶乘的和。</li></ul><hr><h2 id="4判断年份是否是闰年"><a class="markdownIt-Anchor" href="#4判断年份是否是闰年"></a> 4.判断年份是否是闰年</h2><p>难度：<span style="background-color: #1E5D85; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">容易</span></p><blockquote><p>判断该年年份是闰年的条件：</p><ul><li><strong>能被4整除，但不能被100整除</strong></li><li><strong>能被400整除</strong></li></ul></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>year：整数，表示要判断的年份。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示给定年份是否为闰年。如果是闰年，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><p>要求：</p><ul><li>如果输入的参数不是整数，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为整数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(year, <span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否为闰年</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2000</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2020</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">1900</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_leap_year(<span class="number">2022</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>is_leap_year</code>函数中，首先检查输入参数<code>year</code>是否为整数，如果不是则抛出异常。</li><li>使用条件判断来判断给定年份是否为闰年。根据闰年的定义，满足以下条件之一即可：<ul><li>能被400整除；</li><li>能被4整除但不能被100整除。</li></ul></li><li>根据条件依次判断，并返回相应的布尔值。如果满足条件，则返回<code>True</code>；否则返回<code>False</code>。</li></ul><hr><h2 id="5因式分解"><a class="markdownIt-Anchor" href="#5因式分解"></a> 5.因式分解</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>因式分解是将一个数表示为几个因子的乘积的过程，例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>=</mo><mn>2</mn><mo>×</mo><mn>5</mn><mtext>，</mtext><mn>60</mn><mo>=</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">10=2\times5，60=2\times2\times3\times5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord cjk_fallback">，</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>等。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>num：正整数，要进行因式分解的数，要求小于1000。</li></ul><p>输出：</p><ul><li>返回一个字符串，表示因式分解的结果。</li></ul><p>要求：</p><ul><li>如果输入的参数不是正整数或大于等于1000，函数应抛出异常。</li><li>结果中的因子按照从小到大的顺序排列，并以<code>*</code>符号连接。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否为正整数，并且小于1000</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">or</span> num &lt;= <span class="number">0</span> <span class="keyword">or</span> num &gt;= <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;参数必须为正整数且小于1000&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因式分解</span></span><br><span class="line">    factors = []</span><br><span class="line">    divisor = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num % divisor == <span class="number">0</span>:</span><br><span class="line">            factors.append(<span class="built_in">str</span>(divisor))</span><br><span class="line">            num /= divisor</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            divisor += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span>.join(factors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">12</span>))</span><br><span class="line"><span class="comment"># 输出：2*2*3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">36</span>))</span><br><span class="line"><span class="comment"># 输出：2*2*3*3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorize(<span class="number">90</span>))</span><br><span class="line"><span class="comment"># 输出：2*3*3*5</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>factorize</code>函数中，首先检查输入参数<code>num</code>是否为正整数且小于1000，如果不满足要求则抛出异常。</li><li>使用一个循环来进行因式分解，每次找到一个能整除<code>num</code>的最小素数，并将其作为因子添加到结果列表中。然后将<code>num</code>除以该因子，继续寻找下一个因子，直到<code>num</code>等于1为止。</li><li>最后使用<code>*</code>符号连接结果列表中的因子，并返回一个字符串。</li></ul><hr><h2 id="6无重复字符的终止子串"><a class="markdownIt-Anchor" href="#6无重复字符的终止子串"></a> 6.无重复字符的终止子串</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个字符串<code>s</code>，请你找出其中不重复字符的 <strong>最长子串</strong> 的长度。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_substring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>s：字符串，表示输入的字符串。</li></ul><p>输出：</p><ul><li>返回一个整数，表示无重复字符的终止子串的长度。</li></ul><p>要求：</p><ul><li>字符串中只包含英文字母、数字和符号。</li><li>终止子串是指从字符串的某个位置开始，到最后一个不重复字符为止的子串。</li><li>考虑大小写是否敏感。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_substring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否合法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;输入必须为字符串&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用滑动窗口解决问题</span></span><br><span class="line">    window = <span class="built_in">set</span>()</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    max_length = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="comment"># 如果右指针指向的字符在窗口中存在，则移动左指针直到窗口中不再存在该字符</span></span><br><span class="line">        <span class="keyword">while</span> s[right] <span class="keyword">in</span> window:</span><br><span class="line">            window.remove(s[left])</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将当前字符加入窗口中</span></span><br><span class="line">        window.add(s[right])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新最大长度</span></span><br><span class="line">        max_length = <span class="built_in">max</span>(max_length, right - left + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> max_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;abcabcbb&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;bbbbb&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length_of_substring(<span class="string">&quot;pwwkew&quot;</span>))</span><br><span class="line"><span class="comment"># 输出：3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>length_of_substring</code>函数中，首先检查输入参数<code>s</code>是否为字符串，如果不满足要求则抛出异常。</li><li>使用滑动窗口的思想来解决该问题。维护一个窗口，窗口内的字符是不重复的。</li><li>使用两个指针<code>left</code>和<code>right</code>分别表示窗口的左边界和右边界。</li><li>遍历字符串中的每个字符，如果当前字符已经在窗口中存在，则将左指针向右移动，直到窗口中不再存在该字符。</li><li>将当前字符加入窗口中，并更新最大长度。</li><li>最后返回最大长度。</li></ul><hr><h2 id="7组合总和"><a class="markdownIt-Anchor" href="#7组合总和"></a> 7.组合总和</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个无重复元素的正整数数组 <code>candidates</code> 和一个目标整数 <code>target</code>，找出数组中所有可以使数字和为 <code>target</code> 的不同组合。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>candidates：一个无重复元素的正整数数组。</li><li>target：目标整数。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可以使数字和为 <code>target</code> 的不同组合。每个组合是一个列表，其中的数字按非递减顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(candidates, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">and</span> num &gt; <span class="number">0</span> <span class="keyword">for</span> num <span class="keyword">in</span> candidates):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;candidates必须是由正整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(target, <span class="built_in">int</span>) <span class="keyword">or</span> target &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;target必须是正整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义结果列表</span></span><br><span class="line">    result = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯算法搜索组合</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">combination, start, target</span>):</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            result.append(combination)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            <span class="keyword">if</span> target &lt; candidates[i]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            backtrack(combination + [candidates[i]], i, target - candidates[i])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排序数组，并调用回溯算法</span></span><br><span class="line">    candidates.sort()</span><br><span class="line">    backtrack([], <span class="number">0</span>, target)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(combination_sum([<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="number">7</span>))</span><br><span class="line"><span class="comment"># 输出：[[2, 2, 3], [7]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(combination_sum([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 输出：[[2, 2, 2, 2], [2, 3, 3], [3, 5]]</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>combination_sum</code>函数中，首先检查输入参数<code>candidates</code>和<code>target</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法搜索所有可能的组合，将搜索过程封装在<code>backtrack</code>函数中。函数接受三个参数：当前组合<code>combination</code>、搜索起始位置<code>start</code>和剩余目标值<code>target</code>。当目标值等于0时，表示找到了一个满足条件的组合，将其添加到结果列表中。否则，遍历候选数字，并逐个尝试添加到组合中，然后继续递归搜索剩余部分。注意，在递归中更新搜索起始位置为当前位置，以确保不重复使用相同的数字。</li><li>在调用回溯算法之前，对候选数组进行排序，以便于去除重复的组合，并使组合中的数字按非递减顺序排列。</li><li>返回结果列表。</li></ul><hr><h2 id="8全排列"><a class="markdownIt-Anchor" href="#8全排列"></a> 8.全排列</h2><p>难度：<span style="background-color: #EBA119; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">中等</span></p><blockquote><p>给定一个不含重复数字的数组 <code>nums</code>，返回其所有可能的全排列。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums：一个不含重复数字的整数数组。</li></ul><p>输出：</p><ul><li>返回一个列表，包含所有可能的全排列。每个排列是一个列表，其中的数字按任意顺序排列。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums必须是由整数组成的列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义结果列表</span></span><br><span class="line">    result = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯算法生成全排列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start</span>):</span><br><span class="line">        <span class="keyword">if</span> start == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(nums[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">            backtrack(start + <span class="number">1</span>)</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用回溯算法</span></span><br><span class="line">    backtrack(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 输出：[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>permute</code>函数中，首先检查输入参数<code>nums</code>是否符合要求，如果不是则抛出异常。</li><li>定义一个空列表<code>result</code>用于存储结果。</li><li>使用回溯算法生成所有可能的全排列，将搜索过程封装在<code>backtrack</code>函数中。函数接受一个参数<code>start</code>，表示当前要进行交换的位置。当<code>start</code>等于数组长度时，表示已经生成了一个完整的排列，将其添加到结果列表中。否则，遍历数组中从<code>start</code>位置开始的每个数字，并将其与当前位置交换，然后继续递归生成剩余部分的排列。注意，在递归中恢复交换前的状态，以确保不会对后续的排列造成影响。</li><li>调用回溯算法，初始位置为0。</li><li>返回结果列表。</li></ul><hr><h2 id="9寻找两个正序数组的中位数"><a class="markdownIt-Anchor" href="#9寻找两个正序数组的中位数"></a> 9.寻找两个正序数组的中位数</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>，请你找出并返回这两个正序数组的中位数。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_median_sorted_arrays</span>(<span class="params">nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums1：一个正序的整数数组。</li><li>nums2：一个正序的整数数组。</li></ul><p>输出：</p><ul><li>返回两个正序数组的中位数。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li><li>算法的时间复杂度应为 <code>O(log (m+n))</code>。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_median_sorted_arrays</span>(<span class="params">nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums1, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums1):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums1必须是由整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums2, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums2):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums2必须是由整数组成的列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并两个有序数组</span></span><br><span class="line">    merged = []</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums1) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(nums2):</span><br><span class="line">        <span class="keyword">if</span> nums1[i] &lt;= nums2[j]:</span><br><span class="line">            merged.append(nums1[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged.append(nums2[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums1):</span><br><span class="line">        merged.append(nums1[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(nums2):</span><br><span class="line">        merged.append(nums2[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算中位数</span></span><br><span class="line">    mid = <span class="built_in">len</span>(merged) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(merged) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (merged[mid - <span class="number">1</span>] + merged[mid]) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> merged[mid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(find_median_sorted_arrays([<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># 输出：2.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_median_sorted_arrays([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="comment"># 输出：2.5</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>find_median_sorted_arrays</code>函数中，首先检查输入参数<code>nums1</code>和<code>nums2</code>是否符合要求，如果不是则抛出异常。</li><li>合并两个有序数组，将其存储在一个新的列表<code>merged</code>中。使用双指针方法分别遍历<code>nums1</code>和<code>nums2</code>，比较指针位置上的元素大小，并将较小的元素添加到<code>merged</code>中。当其中一个指针遍历到数组末尾时，将另一个数组中剩余的元素添加到<code>merged</code>中。</li><li>根据<code>merged</code>的长度确定中位数的位置。如果<code>merged</code>的长度为奇数，则中位数为<code>merged</code>中间位置的元素；如果<code>merged</code>的长度为偶数，则中位数为中间两个位置的元素的平均值。</li><li>返回中位数。</li></ul><hr><h2 id="10存在重复元素"><a class="markdownIt-Anchor" href="#10存在重复元素"></a> 10.存在重复元素</h2><p>难度：<span style="background-color: #D62E04; color: white; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; padding: 3px 10px; border-radius: 8px;">困难</span></p><blockquote><p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code>，找出满足下述条件的下标对 <code>(i, j)</code>：</p><ul><li><code>i != j</code></li><li><code>abs(i - j) &lt;= indexDiff</code></li><li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li></ul><p>如果存在满足条件的下标对，返回 <code>True</code>；否则，返回 <code>False</code>。</p></blockquote><p>函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_nearby_almost_duplicate</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], indexDiff: <span class="built_in">int</span>, valueDiff: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输入：</p><ul><li>nums：一个整数数组。</li><li>indexDiff：一个整数，表示下标之差的最大值。</li><li>valueDiff：一个整数，表示元素之差的最大值。</li></ul><p>输出：</p><ul><li>返回一个布尔值，表示是否存在满足条件的下标对。</li></ul><p>要求：</p><ul><li>如果输入参数不符合要求，函数应抛出异常。</li></ul><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_nearby_almost_duplicate</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], indexDiff: <span class="built_in">int</span>, valueDiff: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># 检查输入参数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nums, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(num, <span class="built_in">int</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;nums必须是由整数组成的列表&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(indexDiff, <span class="built_in">int</span>) <span class="keyword">or</span> indexDiff &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;indexDiff必须是非负整数&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(valueDiff, <span class="built_in">int</span>) <span class="keyword">or</span> valueDiff &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;valueDiff必须是非负整数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用滑动窗口解决问题</span></span><br><span class="line">    window = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> i &gt; indexDiff:</span><br><span class="line">            window.remove(nums[i - indexDiff - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> window:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(j - nums[i]) &lt;= valueDiff:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        window.add(nums[i])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 输出：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contains_nearby_almost_duplicate([<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在<code>contains_nearby_almost_duplicate</code>函数中，首先检查输入参数<code>nums</code>、<code>indexDiff</code>和<code>valueDiff</code>是否符合要求，如果不是则抛出异常。</li><li>使用滑动窗口的方法来解决问题。维护一个集合<code>window</code>，它表示当前窗口内的元素。遍历数组<code>nums</code>，对于每个元素，将其添加到<code>window</code>中，并判断是否存在满足条件的下标对。如果存在，则返回<code>True</code>；否则，将窗口最左侧的元素移除，并继续遍历下一个元素。</li><li>返回<code>False</code>，表示不存在满足条件的下标对。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
